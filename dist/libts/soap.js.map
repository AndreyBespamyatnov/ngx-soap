{"version":3,"sources":["../../libts/soap.ts"],"names":[],"mappings":"AACA,OAAO,EAAQ,QAAQ,EAAE,MAAM,QAAQ,CAAC;AACxC,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAGlC,MAAM,2BAA2B,GAAQ,EAAE,IAAU,EAAE,OAAgB,EAAE,QAAa;IAA/B,wBAAA,EAAA,YAAgB;IACrE,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;QACjC,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,QAAQ,CAAC;QACxC,QAAQ,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC;aACzB,IAAI,CAAC,UAAA,IAAI;YACR,OAAO,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;QAC5B,CAAC,CAAC;aACD,KAAK,CAAC,UAAA,GAAG,IAAI,OAAA,MAAM,CAAC,GAAG,CAAC,EAAX,CAAW,CAAC,CAAC;QAE3B,mEAAmE;QACrE,MAAM;IACR,CAAC,CAAC,CAAC;AACL,CAAC","file":"soap.js","sourceRoot":"","sourcesContent":["import { findPrefix } from './utils';\nimport { WSDL, openWsdl } from './wsdl';\nimport { Client } from \"./client\";\nimport { Http } from \"@angular/http\";\n\nexport function createSoapClient(url: any, http: Http, options:any = {}, endpoint?:any): Promise<any> {\n  return new Promise((resolve, reject) => {\n    endpoint = options.endpoint || endpoint;\n    openWsdl(url, http, options)\n      .then(wsdl => {\n        resolve(new Client(wsdl));\n      })\n      .catch(err => reject(err));\n    \n      // else resolve(wsdl && new Client(wsdl, endpoint, http, options));\n    // });\n  });\n}"]}