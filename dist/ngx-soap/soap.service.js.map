{"version":3,"sources":["../../ngx-soap/soap.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAG3C,OAAO,uBAAA,CAAwB;AAE/B,OAAO,EAAE,gBAAA,EAAiB,MAAO,eAAA,CAAgB;AAGjD;IAEE;IAAgB,CAAC;IAEjB,kCAAY,GAAZ,UAAa,IAAU,EAAE,GAAW,EAAE,OAAiB;QAAjB,wBAAA,EAAA,YAAiB;QACrD,MAAM,CAAC,gBAAgB,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;IAC9C,CAAC;IAOH,kBAAC;AAAD,CAbA,AAaC;;AANM,sBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,0BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC","file":"soap.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, Headers } from '@angular/http';\nimport { Observable } from \"rxjs/Observable\";\nimport 'rxjs/add/operator/map';\n\nimport { createSoapClient } from \"../libts/soap\";\n\n\nexport class SOAPService {\n  \n  constructor() { }\n\n  createClient(http: Http, url: string, options: any = {}): Promise<any> {\n    return createSoapClient(url, http, options);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}