{"version":3,"sources":["../../ngx-soap/soap.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,IAAA,EAAc,MAAO,eAAA,CAAgB;AAE9C,OAAO,uBAAA,CAAwB;AAE/B,OAAO,KAAK,IAAA,MAAU,eAAA,CAAgB;AAGtC;IAEE,qBACU,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;IAChB,CAAC;IAEL,0BAAI,GAAJ,UAAK,GAAW,EAAE,OAAiB;QAAjB,wBAAA,EAAA,YAAiB;QACjC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,IAAI,CAAC;gBAEH,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,GAAG,EAAE,OAAO,EAAE,UAAC,GAAQ,EAAE,MAAW;oBAC5D,EAAE,CAAA,CAAC,GAAG,CAAC;wBAAC,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC,CAAA;oBAC7B,IAAI;wBAAC,OAAO,CAAC,UAAU,GAAG,MAAM,CAAC,CAAC;gBACpC,CAAC,CAAC,CAAC;YACL,CAAC;YAAC,KAAK,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC;gBACV,MAAM,CAAC,CAAC,CAAC,CAAA;YACX,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAmBH,kBAAC;AAAD,CArCA,AAqCC;;AAjBC,0DAA0D;AAC1D,uCAAuC;AACvC,IAAI;AAEJ,6DAA6D;AAC7D,qCAAqC;AACrC,wDAAwD;AAExD,sFAAsF;AACtF,IAAI;AACC,sBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,0BAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,IAAI,GAAG;CACb,EAF6F,CAE7F,CAAC","file":"soap.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, Headers } from '@angular/http';\nimport { Observable } from \"rxjs/Observable\";\nimport 'rxjs/add/operator/map';\n\nimport * as soap from \"../libts/soap\";\n\n\nexport class SOAPService {\n  \n  constructor(\n    private http: Http\n  ) { }\n\n  call(url: string, options: any = {}): Promise<any> {\n    return new Promise((resolve, reject) => {\n      try {\n\n        soap.default.createClient(url, options, (err: any, client: any) => {\n          if(err) reject(\"Error\" + err)\n          else resolve(\"Working!\" + client);\n        });\n      } catch(e) {\n        reject(e)\n      }\n    });\n  }\n\n  // call(url: string, options: any = {}): Observable<any> {\n  //   return this.getWsdl(url, options);\n  // }\n\n  // getWsdl(url: string, options: any = {}): Observable<any> {\n  //   options.headers = new Headers();\n  //   options.headers.append(\"Content-Type\", \"text/xml\");\n\n  //   return this.http.get(url, options).map(response => console.log(response.text()));\n  // }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}